class a{static instance;audio=null;isPlaying=!1;constructor(){}static getInstance(){return a.instance||(a.instance=new a),a.instance}async play(e){if(this.isPlaying&&this.audio&&!this.audio.paused&&!this.audio.ended){console.log("Audio is already playing");return}this.audio&&(this.audio.pause(),this.audio.currentTime=0),this.audio=new Audio(e),this.isPlaying=!0,this.audio.onended=()=>{this.isPlaying=!1},this.audio.onpause=()=>{this.isPlaying=!1};try{await this.audio.play(),console.log("Audio started")}catch(t){this.isPlaying=!1,console.error("Audio play failed:",t)}}pause(){this.audio&&!this.audio.paused&&this.audio.pause()}stop(){this.audio&&(this.audio.pause(),this.audio.currentTime=0,this.isPlaying=!1)}isAudioPlaying(){return this.isPlaying}}class s{static instance;socket;constructor(){this.socket=null}static getInstance(){return s.instance||(s.instance=new s),s.instance}setOnMessageHandler(e){this.socket&&(this.socket.onmessage=async t=>{await e(t)})}send(e){this.socket&&(this.socket.readyState===WebSocket.OPEN?this.socket.send(e):console.warn("WebSocket is not open"))}closeSocket(){this.socket&&this.socket.close()}getSocket(){return this.socket}connect(e,t){const n=t?`?${new URLSearchParams(t).toString()}`:"",r=`${e}${n}`;this.socket=new WebSocket(r),this.socket.onmessage=async c=>{try{const l=JSON.parse(c.data);await a.getInstance().play(l.content)}catch(l){console.log(l)}}}}let o=null;chrome.runtime.onMessage.addListener(async i=>{switch(i.Type){case"login":s.getInstance().connect("ws://localhost:8080/v1/start-interview",{question_id:"12312312",session_id:"MjrXR0ZMIC_M1whAzQrwTC2ZoysWYyJIMZnQl0YijEc"});const e=s.getInstance().getSocket();o=u(e),o&&o.start();break;case"interview":s.getInstance().closeSocket(),o&&(o.stop(),o=null);break;case"debug":console.log(i);break}});const u=i=>{const e=window.SpeechRecognition||window.webkitSpeechRecognition;if(!e)return console.warn("SpeechRecognition API not supported"),null;const t=new e;return t.continuous=!0,t.interimResults=!1,t.lang="en-US",t.onresult=n=>{const r=n.results[n.results.length-1][0].transcript;if(i&&i.readyState===WebSocket.OPEN){const c={type:"transcript",content:r};i.send(JSON.stringify(c)),console.log(JSON.stringify(c))}else console.warn("WebSocket not connected")},t.onerror=n=>{console.error("Speech recognition error:",n.error)},t};
